var search_data = {"index":{"searchIndex":["djinn","httpstatus","restserver","relativelocation","request","resource","epic","activehandlevalue","activena","collection","json","txt","xhtml","currentuser","filters","handle","handlevalue","bin","json","handles","hooks","nas","resource","resourcefactory","serializer","bin","base","json","txt","xhtml","static","staticcollection","object","string","[]()","accept()","add_filter()","add_hook()","all()","all()","allowed_methods()","best_content_type()","breadcrumbs()","call()","call()","call()","call()","call!()","content_types()","content_types()","current()","do_get()","do_get()","each()","each()","each()","each()","each()","each()","each()","each()","each()","empty?()","empty?()","enforce_admin_record()","escape_html()","escape_path()","footer()","hdllib()","header()","html_base_url()","htmlify()","http_get()","http_head()","http_options()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","parsed_data()","parsed_data=()","prefix()","recurse?()","requested?()","resolver()","serializable_hash()","serialize()","slashify()","template()","unescape_path()","unslashify()"],"longSearchIndex":["djinn","djinn::httpstatus","djinn::restserver","djinn::relativelocation","djinn::request","djinn::resource","epic","epic::activehandlevalue","epic::activena","epic::collection","epic::collection::json","epic::collection::txt","epic::collection::xhtml","epic::currentuser","epic::filters","epic::handle","epic::handlevalue","epic::handlevalue::bin","epic::handlevalue::json","epic::handles","epic::hooks","epic::nas","epic::resource","epic::resourcefactory","epic::serializer","epic::serializer::bin","epic::serializer::base","epic::serializer::json","epic::serializer::txt","epic::serializer::xhtml","epic::static","epic::staticcollection","object","string","epic::resourcefactory#[]()","djinn::request#accept()","epic::filters#add_filter()","epic::hooks#add_hook()","epic::nas::all()","epic::nas#all()","djinn::resource#allowed_methods()","djinn::request#best_content_type()","epic::serializer::xhtml#breadcrumbs()","djinn::restserver#call()","djinn::relativelocation#call()","epic::filters#call()","epic::hooks#call()","djinn::restserver#call!()","epic::collection#content_types()","epic::handlevalue#content_types()","djinn::restserver::current()","epic::collection#do_get()","epic::handlevalue#do_get()","epic::collection::json#each()","epic::collection::txt#each()","epic::collection::xhtml#each()","epic::handle#each()","epic::handlevalue::bin#each()","epic::handlevalue::json#each()","epic::handles#each()","epic::nas#each()","epic::staticcollection#each()","djinn::resource#empty?()","epic::handle#empty?()","epic::handle#enforce_admin_record()","string#escape_html()","string#escape_path()","epic::serializer::xhtml#footer()","object#hdllib()","epic::serializer::xhtml#header()","djinn::request#html_base_url()","djinn::request#htmlify()","djinn::resource#http_get()","djinn::resource#http_head()","djinn::resource#http_options()","djinn::httpstatus::new()","djinn::restserver::new()","djinn::relativelocation::new()","djinn::resource::new()","epic::filters::new()","epic::handle::new()","epic::handlevalue::new()","epic::hooks::new()","epic::serializer::base::new()","epic::static::new()","epic::staticcollection::new()","epic::handlevalue#parsed_data()","epic::handlevalue#parsed_data=()","epic::handles#prefix()","epic::serializer::base#recurse?()","epic::serializer::base#requested?()","epic::currentuser::resolver()","epic::handlevalue#serializable_hash()","epic::serializer::xhtml#serialize()","string#slashify()","djinn::httpstatus::template()","string#unescape_path()","string#unslashify()"],"info":[["Djinn","","Djinn.html","","<p>Namespace for the WebDAV protocol implementation\n"],["Djinn::HTTPStatus","","Djinn/HTTPStatus.html","","<p>This class has a dual nature. It inherits from RuntimeError, so that it may\nbe used together with #raise …\n"],["Djinn::RESTServer","","Djinn/RESTServer.html","","<p>The server class.\n"],["Djinn::RelativeLocation","","Djinn/RelativeLocation.html","","<p>Rack middleware, inspired by Rack::RelativeRedirect. Differences:\n<p>uses Rack::Utils::base_uri for creating …\n"],["Djinn::Request","","Djinn/Request.html","",""],["Djinn::Resource","","Djinn/Resource.html","","<p>Mixin for resource objects.\n"],["EPIC","","EPIC.html","","<p>The namespace for all of the webservice as developed by EPIC.\n<p>The namespace for all of the web service …\n"],["EPIC::ActiveHandleValue","","EPIC/ActiveHandleValue.html","",""],["EPIC::ActiveNA","","EPIC/ActiveNA.html","",""],["EPIC::Collection","","EPIC/Collection.html","","<p>Abstract base class for all collection-style resources in this web service.\n"],["EPIC::Collection::JSON","","EPIC/Collection/JSON.html","",""],["EPIC::Collection::TXT","","EPIC/Collection/TXT.html","",""],["EPIC::Collection::XHTML","","EPIC/Collection/XHTML.html","",""],["EPIC::CurrentUser","","EPIC/CurrentUser.html","",""],["EPIC::Filters","","EPIC/Filters.html","",""],["EPIC::Handle","","EPIC/Handle.html","",""],["EPIC::HandleValue","","EPIC/HandleValue.html","",""],["EPIC::HandleValue::BIN","","EPIC/HandleValue/BIN.html","",""],["EPIC::HandleValue::JSON","","EPIC/HandleValue/JSON.html","",""],["EPIC::Handles","","EPIC/Handles.html","",""],["EPIC::Hooks","","EPIC/Hooks.html","",""],["EPIC::NAs","","EPIC/NAs.html","",""],["EPIC::Resource","","EPIC/Resource.html","","<p>Base class of all resources in this web service.\n"],["EPIC::ResourceFactory","","EPIC/ResourceFactory.html","",""],["EPIC::Serializer","","EPIC/Serializer.html","",""],["EPIC::Serializer::BIN","","EPIC/Serializer/BIN.html","",""],["EPIC::Serializer::Base","","EPIC/Serializer/Base.html","","<p>Base class for all serializers.\n"],["EPIC::Serializer::JSON","","EPIC/Serializer/JSON.html","",""],["EPIC::Serializer::TXT","","EPIC/Serializer/TXT.html","",""],["EPIC::Serializer::XHTML","","EPIC/Serializer/XHTML.html","",""],["EPIC::Static","","EPIC/Static.html","","<p>Rack::Static always maps path ‘/’ to some index document\n(<code>index.html</code> by default). We don’t want this, …\n"],["EPIC::StaticCollection","","EPIC/StaticCollection.html","",""],["Object","","Object.html","",""],["String","","String.html","",""],["[]","EPIC::ResourceFactory","EPIC/ResourceFactory.html#method-i-5B-5D","(path)",""],["accept","Djinn::Request","Djinn/Request.html#method-i-accept","()","<p>Returns an array of acceptable media types for the response\n"],["add_filter","EPIC::Filters","EPIC/Filters.html#method-i-add_filter","(name, &block)",""],["add_hook","EPIC::Hooks","EPIC/Hooks.html#method-i-add_hook","(name, &block)",""],["all","EPIC::NAs","EPIC/NAs.html#method-c-all","()",""],["all","EPIC::NAs","EPIC/NAs.html#method-i-all","()",""],["allowed_methods","Djinn::Resource","Djinn/Resource.html#method-i-allowed_methods","()",""],["best_content_type","Djinn::Request","Djinn/Request.html#method-i-best_content_type","(content_types)",""],["breadcrumbs","EPIC::Serializer::XHTML","EPIC/Serializer/XHTML.html#method-i-breadcrumbs","()",""],["call","Djinn::RESTServer","Djinn/RESTServer.html#method-i-call","(p_env)",""],["call","Djinn::RelativeLocation","Djinn/RelativeLocation.html#method-i-call","(env)","<p>Call the next middleware with the environment.  If the request was a\nredirect (response status 301, 302, …\n"],["call","EPIC::Filters","EPIC/Filters.html#method-i-call","(name, input, *args)",""],["call","EPIC::Hooks","EPIC/Hooks.html#method-i-call","(name, *args)",""],["call!","Djinn::RESTServer","Djinn/RESTServer.html#method-i-call-21","(p_env)",""],["content_types","EPIC::Collection","EPIC/Collection.html#method-i-content_types","()",""],["content_types","EPIC::HandleValue","EPIC/HandleValue.html#method-i-content_types","()",""],["current","Djinn::RESTServer","Djinn/RESTServer.html#method-c-current","()","<p>This may not actually be necessary. See also #call, which populates class\nvariable @@instances.\n"],["do_GET","EPIC::Collection","EPIC/Collection.html#method-i-do_GET","(request, response)",""],["do_GET","EPIC::HandleValue","EPIC/HandleValue.html#method-i-do_GET","(request, response)",""],["each","EPIC::Collection::JSON","EPIC/Collection/JSON.html#method-i-each","()",""],["each","EPIC::Collection::TXT","EPIC/Collection/TXT.html#method-i-each","()",""],["each","EPIC::Collection::XHTML","EPIC/Collection/XHTML.html#method-i-each","()",""],["each","EPIC::Handle","EPIC/Handle.html#method-i-each","()",""],["each","EPIC::HandleValue::BIN","EPIC/HandleValue/BIN.html#method-i-each","()",""],["each","EPIC::HandleValue::JSON","EPIC/HandleValue/JSON.html#method-i-each","()",""],["each","EPIC::Handles","EPIC/Handles.html#method-i-each","()",""],["each","EPIC::NAs","EPIC/NAs.html#method-i-each","()",""],["each","EPIC::StaticCollection","EPIC/StaticCollection.html#method-i-each","(&block)",""],["empty?","Djinn::Resource","Djinn/Resource.html#method-i-empty-3F","()",""],["empty?","EPIC::Handle","EPIC/Handle.html#method-i-empty-3F","()",""],["enforce_admin_record","EPIC::Handle","EPIC/Handle.html#method-i-enforce_admin_record","()",""],["escape_html","String","String.html#method-i-escape_html","()",""],["escape_path","String","String.html#method-i-escape_path","()",""],["footer","EPIC::Serializer::XHTML","EPIC/Serializer/XHTML.html#method-i-footer","()",""],["hdllib","Object","Object.html#method-i-hdllib","()",""],["header","EPIC::Serializer::XHTML","EPIC/Serializer/XHTML.html#method-i-header","()",""],["html_base_url","Djinn::Request","Djinn/Request.html#method-i-html_base_url","()",""],["htmlify","Djinn::Request","Djinn/Request.html#method-i-htmlify","(path)",""],["http_GET","Djinn::Resource","Djinn/Resource.html#method-i-http_GET","(request, response)","<p>Classes that include this module may implement method\n<code>#content_types</code> to for content negotiation. This …\n"],["http_HEAD","Djinn::Resource","Djinn/Resource.html#method-i-http_HEAD","(request, response)",""],["http_OPTIONS","Djinn::Resource","Djinn/Resource.html#method-i-http_OPTIONS","(request, response)","<p>Handles an OPTIONS request.\n<p>An <code>Allow:</code> header is created, listing all implemented HTTP\nmethods for this …\n"],["new","Djinn::HTTPStatus","Djinn/HTTPStatus.html#method-c-new","( message )","<p>The general format of <code>message</code> is: +&lt;status&gt; [\n&lt;space&gt; &lt;message&gt; ]+\n"],["new","Djinn::RESTServer","Djinn/RESTServer.html#method-c-new","(resource_factory = nil)","<p>Prototype constructor. The supplied <code>resource_factory</code> must\nrespond to method #[]. This method will be …\n"],["new","Djinn::RelativeLocation","Djinn/RelativeLocation.html#method-c-new","(app)","<p>Initialize a new RelativeRedirect object with the given arguments. \nArguments:\n<p>app : The next middleware …\n"],["new","Djinn::Resource","Djinn/Resource.html#method-c-new","(path)",""],["new","EPIC::Filters","EPIC/Filters.html#method-c-new","()",""],["new","EPIC::Handle","EPIC/Handle.html#method-c-new","(path, activeHandleValues = nil)",""],["new","EPIC::HandleValue","EPIC/HandleValue.html#method-c-new","(path, ahv = nil)","<p>Can be called with either an ActiveHandleValue object, or with a hash of\nkey =&gt; value pairs.\n"],["new","EPIC::Hooks","EPIC/Hooks.html#method-c-new","()",""],["new","EPIC::Serializer::Base","EPIC/Serializer/Base.html#method-c-new","(resource, request)",""],["new","EPIC::Static","EPIC/Static.html#method-c-new","(app, options = {})","<p>Overrides Rack::Static#new: it sets +@index+ to nil unless some index was\nexplicitly defined in the  …\n"],["new","EPIC::StaticCollection","EPIC/StaticCollection.html#method-c-new","(path)",""],["parsed_data","EPIC::HandleValue","EPIC/HandleValue.html#method-i-parsed_data","()",""],["parsed_data=","EPIC::HandleValue","EPIC/HandleValue.html#method-i-parsed_data-3D","(p_data)",""],["prefix","EPIC::Handles","EPIC/Handles.html#method-i-prefix","()",""],["recurse?","EPIC::Serializer::Base","EPIC/Serializer/Base.html#method-i-recurse-3F","()",""],["requested?","EPIC::Serializer::Base","EPIC/Serializer/Base.html#method-i-requested-3F","()",""],["resolver","EPIC::CurrentUser","EPIC/CurrentUser.html#method-c-resolver","(p_handle = HANDLE, p_idx = IDX)",""],["serializable_hash","EPIC::HandleValue","EPIC/HandleValue.html#method-i-serializable_hash","()",""],["serialize","EPIC::Serializer::XHTML","EPIC/Serializer/XHTML.html#method-i-serialize","(p)",""],["slashify","String","String.html#method-i-slashify","()",""],["template","Djinn::HTTPStatus","Djinn/HTTPStatus.html#method-c-template","(&block)","<p>The passed block must accept two arguments:\n<p><strong>int</strong> a status code\n<p><strong>string</strong> an xhtml fragment\n"],["unescape_path","String","String.html#method-i-unescape_path","( encoding = Encoding::UTF_8 )",""],["unslashify","String","String.html#method-i-unslashify","()",""]]}}